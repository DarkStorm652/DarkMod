package org.darkstorm.minecraft.darkmod.tools;

import java.io.*;
import java.util.*;
import java.util.jar.*;
import java.util.zip.*;

import org.darkstorm.minecraft.darkmod.DarkMod;
import org.darkstorm.tools.io.IOTools;
import org.darkstorm.tools.strings.StringTools;

/**
 * Outputs a proper form of the jar file generated by the Eclipse export feature
 */
public class JarCreator {

	public static void main(String[] args) {
		try {
			HashMap<String, byte[]> entryBytes = new HashMap<String, byte[]>();

			{
				System.out.println("Reading original entries...");
				File darkModJar = new File("DarkMod.jar");
				JarFile jarFile = new JarFile(darkModJar);
				Enumeration<JarEntry> entries = jarFile.entries();
				while(entries.hasMoreElements()) {
					JarEntry entry = entries.nextElement();
					String entryName = entry.getName();
					if(entryName.startsWith("org/lwjgl")
							|| entryName.startsWith("net/java")
							|| !entryName.contains("/")
							|| entryName.startsWith("META-INF/"))
						continue;
					entryBytes.put(entryName, IOTools.readAll(jarFile
							.getInputStream(entry)));
					System.out.println("	" + entryName);
				}

				System.out.println("Generating manifest...");
				ByteArrayOutputStream baOut = new ByteArrayOutputStream();
				PrintStream manifestStream = new PrintStream(baOut);
				String[] manifest = { "Manifest-Version: 1.0", "Class-Path: .",
						"Main-Class: org.darkstorm.minecraft.darkmod.Main" };
				for(String manifestLine : manifest) {
					manifestStream.println(manifestLine);
					System.out.println("	" + manifestLine);
				}
				manifestStream.println();
				manifestStream.close();
				entryBytes.put("META-INF/MANIFEST.MF", baOut.toByteArray());
			}

			{
				System.out.println("Outputting new jar...");
				ByteArrayOutputStream jarOut = new ByteArrayOutputStream();
				JarOutputStream entriesOutputStream = new JarOutputStream(
						jarOut);
				JarOutputStream jarOutputStream = new JarOutputStream(
						new FileOutputStream(new File("dist/DarkMod"
								+ DarkMod.getVersion() + ".jar")));
				for(String entryName : entryBytes.keySet()) {
					entriesOutputStream.putNextEntry(new JarEntry(entryName));
					entriesOutputStream.write(entryBytes.get(entryName));
					jarOutputStream.putNextEntry(new JarEntry(entryName));
					jarOutputStream.write(entryBytes.get(entryName));
					System.out.println("	" + entryName);
				}
				entriesOutputStream.finish();
				entriesOutputStream.close();
				jarOutputStream.finish();
				jarOutputStream.close();
				entryBytes.clear();
				entryBytes.put("DarkMod.jar", jarOut.toByteArray());
			}

			{
				System.out.println("Reading mods...");
				File modsDir = new File("mods");
				File[] mods = modsDir.listFiles();
				for(File mod : mods) {
					String path = mod.getAbsolutePath();
					path = "mods/" + StringTools.splitFirst(path, "mods/")[1];
					if(!path.endsWith(".class"))
						continue;
					entryBytes.put(path, IOTools.download(mod.toURI().toURL()));
					System.out.println("	" + path);
				}
			}

			{
				System.out.println("Reading Hooks.xml");
				entryBytes.put("hooks/Hooks.xml", IOTools.download(new File(
						"hooks/Hooks.xml").toURI().toURL()));
			}

			{
				System.out.println("Outputting zip file...");
				ZipOutputStream outputStream = new ZipOutputStream(
						new FileOutputStream(new File("dist/DarkMod"
								+ DarkMod.getVersion() + ".zip")));
				for(String entryName : entryBytes.keySet()) {
					outputStream.putNextEntry(new ZipEntry(entryName));
					outputStream.write(entryBytes.get(entryName));
					System.out.println("	" + entryName);
				}
				outputStream.finish();
				outputStream.close();
			}
			System.out.println("Done.");
		} catch(Exception exception) {
			exception.printStackTrace();
		}
	}
}
